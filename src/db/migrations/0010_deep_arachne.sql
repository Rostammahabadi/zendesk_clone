CREATE TYPE "public"."app_permission" AS ENUM('channels.delete', 'messages.delete', 'users.insert', 'users.select', 'users.update', 'users.delete', 'user_teams.insert', 'user_teams.select');--> statement-breakpoint
CREATE TYPE "public"."app_role" AS ENUM('admin', 'moderator');--> statement-breakpoint
CREATE TABLE "role_permissions" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "role_permissions_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"role" "app_role" NOT NULL,
	"permission" "app_permission" NOT NULL,
	CONSTRAINT "role_permissions_role_permission_key" UNIQUE("role","permission")
);
--> statement-breakpoint
CREATE TABLE "skills" (
	"id" serial PRIMARY KEY NOT NULL,
	"company_id" uuid NOT NULL,
	"name" varchar(100) NOT NULL,
	"created_at" timestamp with time zone DEFAULT NOW() NOT NULL,
	"updated_at" timestamp with time zone DEFAULT NOW() NOT NULL
);
--> statement-breakpoint
CREATE TABLE "user_roles" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "user_roles_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"user_id" uuid NOT NULL,
	"role" "app_role" NOT NULL,
	CONSTRAINT "user_roles_user_id_role_key" UNIQUE("user_id","role")
);
--> statement-breakpoint
ALTER TABLE "user_roles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "user_skills" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" uuid NOT NULL,
	"skill_id" integer NOT NULL,
	"proficiency" varchar(50),
	"added_at" timestamp with time zone DEFAULT NOW() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "users" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
DROP INDEX "idx_companies_name";--> statement-breakpoint
DROP INDEX "idx_companies_domain";--> statement-breakpoint
DROP INDEX "idx_tags_name";--> statement-breakpoint
DROP INDEX "idx_tags_company_id";--> statement-breakpoint
DROP INDEX "idx_teams_name";--> statement-breakpoint
DROP INDEX "idx_teams_company_id";--> statement-breakpoint
DROP INDEX "idx_ticket_events_ticket_id";--> statement-breakpoint
DROP INDEX "idx_ticket_events_triggered_by";--> statement-breakpoint
DROP INDEX "idx_ticket_events_event_type";--> statement-breakpoint
DROP INDEX "idx_ticket_messages_ticket_id";--> statement-breakpoint
DROP INDEX "idx_ticket_messages_sender_id";--> statement-breakpoint
DROP INDEX "idx_ticket_tags_ticket_id";--> statement-breakpoint
DROP INDEX "idx_ticket_tags_tag_id";--> statement-breakpoint
DROP INDEX "idx_tickets_company_id";--> statement-breakpoint
DROP INDEX "idx_tickets_created_by";--> statement-breakpoint
DROP INDEX "idx_tickets_assigned_to";--> statement-breakpoint
DROP INDEX "idx_tickets_status";--> statement-breakpoint
DROP INDEX "idx_tickets_priority";--> statement-breakpoint
DROP INDEX "idx_user_teams_user_id";--> statement-breakpoint
DROP INDEX "idx_user_teams_team_id";--> statement-breakpoint
DROP INDEX "idx_users_email";--> statement-breakpoint
DROP INDEX "idx_users_company_id";--> statement-breakpoint
DROP INDEX "idx_users_role";--> statement-breakpoint
ALTER TABLE "companies" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "companies" ALTER COLUMN "updated_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "tags" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "tags" ALTER COLUMN "updated_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "teams" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "teams" ALTER COLUMN "updated_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "ticket_events" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "ticket_messages" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "ticket_tags" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "tickets" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "tickets" ALTER COLUMN "updated_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "user_teams" ALTER COLUMN "assigned_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "users" ALTER COLUMN "id" DROP DEFAULT;--> statement-breakpoint
ALTER TABLE "users" ALTER COLUMN "created_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "users" ALTER COLUMN "updated_at" SET DEFAULT now();--> statement-breakpoint
ALTER TABLE "skills" ADD CONSTRAINT "skills_company_id_companies_id_fk" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_roles" ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_skills" ADD CONSTRAINT "user_skills_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "user_skills" ADD CONSTRAINT "user_skills_skill_id_skills_id_fk" FOREIGN KEY ("skill_id") REFERENCES "public"."skills"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE UNIQUE INDEX "skills_name_unique" ON "skills" USING btree ("name");--> statement-breakpoint
CREATE INDEX "idx_companies_name" ON "companies" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "idx_companies_domain" ON "companies" USING btree ("domain" text_ops);--> statement-breakpoint
CREATE INDEX "idx_tags_name" ON "tags" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "idx_tags_company_id" ON "tags" USING btree ("company_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_teams_name" ON "teams" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "idx_teams_company_id" ON "teams" USING btree ("company_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_events_ticket_id" ON "ticket_events" USING btree ("ticket_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_events_triggered_by" ON "ticket_events" USING btree ("triggered_by" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_events_event_type" ON "ticket_events" USING btree ("event_type" text_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_messages_ticket_id" ON "ticket_messages" USING btree ("ticket_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_messages_sender_id" ON "ticket_messages" USING btree ("sender_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_tags_ticket_id" ON "ticket_tags" USING btree ("ticket_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_ticket_tags_tag_id" ON "ticket_tags" USING btree ("tag_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_tickets_company_id" ON "tickets" USING btree ("company_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_tickets_created_by" ON "tickets" USING btree ("created_by" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_tickets_assigned_to" ON "tickets" USING btree ("assigned_to" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_tickets_status" ON "tickets" USING btree ("status" text_ops);--> statement-breakpoint
CREATE INDEX "idx_tickets_priority" ON "tickets" USING btree ("priority" text_ops);--> statement-breakpoint
CREATE INDEX "idx_user_teams_user_id" ON "user_teams" USING btree ("user_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_user_teams_team_id" ON "user_teams" USING btree ("team_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_users_email" ON "users" USING btree ("email" text_ops);--> statement-breakpoint
CREATE INDEX "idx_users_company_id" ON "users" USING btree ("company_id" uuid_ops);--> statement-breakpoint
CREATE INDEX "idx_users_role" ON "users" USING btree ("role" text_ops);--> statement-breakpoint
CREATE POLICY "select_users_policy" ON "users" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((( SELECT auth.uid() AS uid) = id));--> statement-breakpoint
CREATE POLICY "admin_access_to_all_users_within_company" ON "users" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "admin_access_test_without_text" ON "users" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Allow auth admin to read user roles" ON "user_roles" AS PERMISSIVE FOR SELECT TO "supabase_auth_admin" USING (true);